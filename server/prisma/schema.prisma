generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model Station {
  stationId    Int      @id @default(autoincrement())
  stationName  String   @unique
  // Relations
  errors       Errors[]  // One-to-many with Errors
}

model Errors {
  errorId      Int      @id @default(autoincrement())
  errorCode    String   @unique()
  stationId    Int      // Foreign key to Station
  // Relations
  station      Station  @relation(fields: [stationId], references: [stationId])
  debugSteps   DebugSteps[]  // One-to-many with DebugSteps
}

model DebugSteps {
  debugStepId        Int     @id @default(autoincrement())
  stepCode           String  @unique
  errorId            Int     // Foreign key to Errors
  stepDescription    String
  location           String
  componentNames     String
  netSignal          String
  conclusion         String
  debugStepSuccess   String
  debugStepFail      String
  sequence           String
  idealDiodeRange    String
  error              Errors  @relation(fields: [errorId], references: [errorId])
}

model User {
  userId        Int     @id @default(autoincrement())
  userEmail     String  @unique
  userPassword  String
  userRole      Roles
  isVerified    Boolean @default(false)
}

model EmpSuggestion {
  empSuggestionId  Int     @id @default(autoincrement())
  empId            Int     // Reference to an employee, not enforced as relation
  errorId          Int
  suggestion       String
  status           SuggestionStatus @default(PENDING)
}

enum Roles {
  USER
  ENGINEER
  FA_EXPERT
  ADMIN
}

enum SuggestionStatus {
  PENDING
  APPROVED
  REJECTED
}
